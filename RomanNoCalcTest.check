#include "IpNumberCheck.h"
#include "RomanToDecimal.h"
#include "AddOrSub.h"
#include "DecimalToRoman.h"
#include<stdlib.h>
char RomanNo[20];
char RomanNo1[] = "MCDLV";
char RomanNo2[] = "MXLVI";
char RomanNo3[] = "IV";
char *c1;
char *c2;

//Visit TestPlan.txt for more details about the tests
//Test-1 
#test whenIpNumberCheckispassedIitReturnsOne 
	
	RomanNo[0] = 'I';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-1
#test whenIpNumberCheckispassedVitReturnsOne
	
	RomanNo[0] = 'V';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-2
#test whenIpNumberCheckispassedXitReturnsOne
	
	RomanNo[0] = 'X';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-3
#test whenIpNumberCheckispassedLitReturnsOne
	
	RomanNo[0] = 'L';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-4
#test whenIpNumberCheckispassedCitReturnsOne
	
	RomanNo[0] = 'C';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-5
#test whenIpNumberCheckispassedDitReturnsOne
	
	RomanNo[0] = 'D';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-1-6
#test whenIpNumberCheckispassedMitReturnsOne
	
	RomanNo[0] = 'M';
	ck_assert_int_eq(IpCheck(RomanNo),1);

//Test-2
#test whenIpNumberCheckIsPassedRomanNumberStringItReturnsOne
	
	ck_assert_int_eq(IpCheck(RomanNo1),1);

//Test-3 
#test whenRomanToDecimalIsPassedIitReturnsOne 
	
	RomanNo[0] = 'I';
	ck_assert_int_eq(RomanToDecimal(RomanNo),1);

//Test-3-1
#test whenRomanToDecimalIsPassedVitReturnsFive 
	
	RomanNo[0] = 'V';
	ck_assert_int_eq(RomanToDecimal(RomanNo),5);

//Test-3-2
#test whenRomanToDecimalIsPassedXitReturnsTen 
	
	RomanNo[0] = 'X';
	ck_assert_int_eq(RomanToDecimal(RomanNo),10);

//Test-3-3
#test whenRomanToDecimalIsPassedLitReturnsFifty 
	
	RomanNo[0] = 'L';
	ck_assert_int_eq(RomanToDecimal(RomanNo),50);

//Test-3-4
#test whenRomanToDecimalIsPassedCitReturnsHundred 
	
	RomanNo[0] = 'C';
	ck_assert_int_eq(RomanToDecimal(RomanNo),100);

//Test-3-5
#test whenRomanToDecimalIsPassedDitReturnsFiveHundred 
	
	RomanNo[0] = 'D';
	ck_assert_int_eq(RomanToDecimal(RomanNo),500);

//Test-3-6
#test whenRomanToDecimalIsPassedMitReturnsThousand
	
	RomanNo[0] = 'M';
	ck_assert_int_eq(RomanToDecimal(RomanNo),1000);

//Test-4
#test whenRomanToDecimalIsPassedStrigItShouldReturnAdditionOfEachCharValue							

	ck_assert_int_eq(RomanToDecimal(RomanNo1),1455);

//Test-5
#test whenRomanToDecimalIsPassedIVItShouldReturnFour							

	ck_assert_int_eq(RomanToDecimal(RomanNo3),4);

//Test-6
#test whenAddIsPassedTwoValuesItReturnsItAddition							

	ck_assert_int_eq(Add(RomanToDecimal(RomanNo1),RomanToDecimal(RomanNo2)),2501);

//Test-7
#test whenSubIsPassedTwoValuesItReturnsItSubtraction							

	ck_assert_int_eq(Sub(RomanToDecimal(RomanNo1),RomanToDecimal(RomanNo2)),409);

//Test-8
#test whenSubIsPassedTwoValuesItReturnsPositiveValueOfItsSubtraction
//Where first value is less then second value							

	ck_assert_int_eq(Sub(RomanToDecimal(RomanNo2),RomanToDecimal(RomanNo1)),409);

//Test-9
#test whenDecimalToRomanIsPassedOneItShouldReturnI
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(1);
	ck_assert_str_eq(c1,"I");

//Test-9-1
#test whenDecimalToRomanIsPassedTwoItShouldReturnII
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(2);
	ck_assert_str_eq(c1,"II");

//Test-9-2
#test whenDecimalToRomanIsPassedThreeItShouldReturnIII
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(3);
	ck_assert_str_eq(c1,"III");

//Test-9-3
#test whenDecimalToRomanIsPassedFourItShouldReturnIV
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(4);
	ck_assert_str_eq(c1,"IV");

//Test-9-4
#test whenDecimalToRomanIsPassedFiveItShouldReturnV
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(5);
	ck_assert_str_eq(c1,"V");

//Test-9-5
#test whenDecimalToRomanIsPassedSixItShouldReturnVI
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(6);
	ck_assert_str_eq(c1,"VI");

//Test-9-6
#test whenDecimalToRomanIsPassedSevenItShouldReturnVII
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(7);
	ck_assert_str_eq(c1,"VII");

//Test-9-7
#test whenDecimalToRomanIsPassedEightItShouldReturnVIII
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(8);
	ck_assert_str_eq(c1,"VIII");

//Test-9-8
#test whenDecimalToRomanIsPassedNineItShouldReturnIX
	
	c1 = (char *)malloc(30);
	c1 = DecimalToRoman(9);
	ck_assert_str_eq(c1,"IX");

//Test-10
#test whenDecimalToRomanIsPassedTenItShouldReturnX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(10);
	ck_assert_str_eq(c2,"X");
	
//Test-10-1
#test whenDecimalToRomanIsPassedTwentyItShouldReturnXX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(20);
	ck_assert_str_eq(c2,"XX");

//Test-10-2
#test whenDecimalToRomanIsPassedThirtyItShouldReturnXXX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(30);
	ck_assert_str_eq(c2,"XXX");	

//Test-10-3
#test whenDecimalToRomanIsPassedFourtyItShouldReturnXL
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(40);
	ck_assert_str_eq(c2,"XL");	

//Test-10-4
#test whenDecimalToRomanIsPassedFiftyItShouldReturnL
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(50);
	ck_assert_str_eq(c2,"L");

//Test-10-5
#test whenDecimalToRomanIsPassedSixtyItShouldReturnLX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(60);
	ck_assert_str_eq(c2,"LX");	

//Test-10-6
#test whenDecimalToRomanIsPassedSeventyItShouldReturnLXX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(70);
	ck_assert_str_eq(c2,"LXX");	

//Test-10-7
#test whenDecimalToRomanIsPassedEightyItShouldReturnLXXX
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(80);
	ck_assert_str_eq(c2,"LXXX");

//Test-10-8
#test whenDecimalToRomanIsPassedNintyItShouldReturnXC
	
	c2 = (char *)malloc(30);
	c2 = DecimalToRoman(90);
	ck_assert_str_eq(c2,"XC");		
